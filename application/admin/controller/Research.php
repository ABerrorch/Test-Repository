<?php
/**
 * Created by PhpStorm.
 * User: Huan
 * Date: 2019/3/22
 * Time: 16:25
 */
namespace app\admin\controller;
use app\common\controller\Adminbase;
use think\Auth;
use think\Db;
use think\Request;
use think\Session;

class Research extends Listfile {
    protected $authority;
    protected $research_id;
    /**
     *  Reaserch列表
     * 只显示相关Reaserch
     */
    public function _initialize(){
        parent::_initialize(); // TODO: Change the autogenerated stub
        //首先,尝试获得当前课题编号(因为传递参数的时候可能只传递了会议编号或者要求编号)
        $request = Request::instance();
        $research_id = null;
        if($request->has('research_id')){
            $research_id = $request->param('research_id');
        } else if($request->has('conference_id')){
            $conference_id = $request->param('conference_id');
            $research_id = Db::name('conference')
                ->where('id',$conference_id)
                ->find()['research_id'];
        } else  if($request->has('request_id')) {
            $request_id = $request->param('request_id');
            $research_id = Db::name('request')
                ->alias('req')
                ->join('__CONFERENCE__ con','req.conference_id=con.id')
                ->where('req.id',$request_id)
                ->find()['research_id'];
        }


        //然后根据课题编号获取权限
        // Principal = 2
        // Teammate = 1
        // Neither = 0
        // Null = -1
        // 没有Great/Great/Great权限 <= 1
        $this->research_id = $research_id;
        $this->authority = $this->userInResearch($research_id);
        // 如果是项目的管理者/组员，那么也有在research中相应的权限
        if(isset($research_id)){
            $project_id = Db::name('research')
                ->where('id',$research_id)
                ->find()['project_id'];
            $authority = $this->userInProject($project_id);
            $this->authority = max($this->authority,$authority);
        }
        // 如果是项目的

        // 裁定有没有Great/great/great权限
        $auth = Auth::instance();
        if(!$auth->check("Great/great/great",session('user')['id'])){
            trace("NO Great/great/great authority");
            $this->authority = min(1,$this->authority);
        }
        trace("Get research authority : " . (string)$this->authority);
    }

    //-----------------------------------------------------------------------------------------------
    // 课题权限
    //-----------------------------------------------------------------------------------------------
    /**
     * setAuthority 设置相应的权限(如果权限不够就被直接拒绝)
     */
    protected function setAuthority($value){
        if($this->authority < $value)
            $this->error('没有课题/项目权限');
    }

    /** 判断用户是否在课题/项目内
     * Principal = 2
     * Teammate = 1
     * Neither = 0
     * Null = -1
     */
    protected function userInResearch($research_id,$user=null){
        if(!isset($research_id))
            return -1;
        if(!isset($user)){
            $user = Session::get('user.username');
        }
        $data = Db::name('research')
            ->where('id',$research_id)
            ->where("
            principal='$user'
            OR principal LIKE '$user,%'
            OR principal LIKE '%,$user,%'
            OR principal LIKE '%,$user'")
            ->find();
        if(!empty($data))return 2;
        $data = Db::name('research')
            ->where('id',$research_id)
            ->where("
            teammate ='$user'
            OR teammate LIKE '$user,%'
            OR teammate LIKE '%,$user,%'
            OR teammate LIKE '%,$user'")
            ->find();
        if(!empty($data))return 1;
        return 0;
    }
    protected function userInProject($project_id,$user=null){
        if(!isset($project_id))
            return -1;
        if(!isset($user)){
            $user = Session::get('user.username');
        }
        $data = Db::name('project')
            ->where('id',$project_id)
            ->where("
            principal ='$user'
            OR principal LIKE '$user,%'
            OR principal LIKE '%,$user,%'
            OR principal LIKE '%,$user'")
            ->find();
        if(!empty($data))return 2;
        $data = Db::name('project')
            ->where('id',$project_id)
            ->where("
            teammate ='$user'
            OR teammate LIKE '$user,%'
            OR teammate LIKE '%,$user,%'
            OR teammate LIKE '%,$user'")
            ->find();
        if(!empty($data))return 1;
        return 0;
    }

    //-----------------------------------------------------------------------------------------------
    // 课题列表、课题管理
    //-----------------------------------------------------------------------------------------------
    public function index() {
        $name = Session::get("user.username");

        //下面的A|B是TP5的一种高级查询语法叫做快捷查询
        $data = Db::name('research')
            ->where("
            principal='$name'
            OR principal LIKE '$name,%'
            OR principal LIKE '%,$name,%'
            OR principal LIKE '%,$name'            
            OR teammate ='$name'
            OR teammate LIKE '$name,%'
            OR teammate LIKE '%,$name,%'
            OR teammate LIKE '%,$name'")
            ->order('id',"DESC")
            ->paginate(10);
//            ->select();
        return view("index",[
            'title'=>'项目课题管理',
            'subtitle'=>'课题列表',
            'data'=>$data,
        ]);
    }
    public function research_dominate($research_id,$conference_id = null,$function=null,$request_id = null){
        $this->setAuthority(1);
        $data = Db::name('files')
            ->where('type',"research:$research_id")
            ->order('id','DESC')
            ->select();
        trace("research:$research_id");
        $research = Db::name('research')
            ->where(['id'=>$research_id])
            ->find();
        $conference = Db::name('conference')
            ->where(['research_id'=>$research_id])
            ->order('id','DESC')
            ->select();

        if($conference_id == null && !empty($conference)){
            $conference_id=$conference[0]['id'];
        }
        if($conference_id != null){
            $conference_now = Db::name('conference')->where('id',$conference_id)->find();
            //注意,在join中使用__FILES__ = prefix . files, 这是为了避免使用前缀
            $request = Db::name('request')
                ->alias('a')
                ->join('__FILES__ b','a.file_id=b.id','left')
                ->field(["a.*","b.filename"])
                ->where("a.conference_id",$conference_id)
                ->order("a.id","DESC")
                ->select();
//            print_r($data);
        } else $conference_now = $request = [];

        // 获取项目推送的文件
        $pfile = Db::name('pjtpushfile')
            ->where('project_id',$research['project_id'])
            ->select();
        $tmp = [-1];
        foreach ($pfile as $v){
            $tmp[count($tmp)] = $v['file_id'];
        }
        $pfile = Db::name('files')
            ->where('id','in',$tmp)
            ->order('id','DESC')
            ->select();


        // 获取项目推送的会议
        $pconf = Db::name('pjtpushconf')
            ->where('project_id',$research['project_id'])
            ->where('research_id',$research['id'])
            ->select();
        $tmp = [-1];
        foreach ($pconf as $v){
            $tmp[count($tmp)] = $v['conference_id'];
        }
        $push_conf = $tmp;
        $pconf = Db::name('conference')
            ->where('id','in',$tmp)
            ->order('id','DESC')
            ->select();

        if($function == 'conf' && in_array($conference_id,$push_conf)){
            $function = 'pushconf';
        }

        // 获取会议文件历史
        $history = [];
        if(!empty($request_id)){
            $req = Db::name('request')->where('id',$request_id)->find();
            $history = explode(',',$req['history']);
            if(!empty($history))
                $history = Db::name('files')
                    ->where('id','in',$history)
                    ->field('id,filename,abstract,type,datetime,author')
                    ->order('id DESC')
                    ->select();
        }
        $history_json = json_encode($history);

        $this->assign([
            'title'=>'项目课题管理',
            'subtitle'=>'课题管理',
            'data'=>$data,                      // 文件
            'research'=>$research,              // 当前课题
            'conference'=>$conference,          // 课题会议
            'conference_id'=>$conference_id,    // 当前课题会议id
            'conference_now'=>$conference_now,  // 当前会议
            'request'=>$request,                // 当前会议的要求
            'authority'=>$this->authority,      // 权限
            'pfile'=>$pfile,
            'pconf'=>$pconf,
            'function'=>$function,
            'history_json'=>$history_json,
            'cols_json'=>json_encode($this->cols),
        ]);
        return view('research_dominate');
    }
    /**
     * @param $research_id
     * @throws \think\Exception
     * @throws \think\exception\PDOException
     * 写给后面可能的看到这句话的开发者:
     * 这个函数叫做rename是因为一开始只打算做rename的功能,后面加了其他功能
     * 别生气了，我也很绝望
     */
    public function research_rename($research_id){
        $this->setAuthority(2);
        $post = $this->request->post();
//        echo "<pre>";
//        print_r($this->request->param('research_principal'));
//        echo "</pre>";
        $data = [
            'principal'=>trim($post['research_principal']),
            'teammate'=>trim($post['research_teammate']),
        ];
        $result = Db::name('research')
            ->where('id',$research_id)
            ->update($data);
        if($result){
            $this->redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->error("research_rename : 没有更新数据库,可能是没有键入修改");
        }
    }


    //-----------------------------------------------------------------------------------------------
    // 会议相关
    //-----------------------------------------------------------------------------------------------
    /**
     * 会议添加
     * @param $research_id
     * 必须拥有principal权限
     */
    public function conference_add($research_id){
        $this->setAuthority(2);
        $data = [
            'research_id'=>$research_id
        ];
        if(Db::name('conference')->insert($data))
            $this->redirect($_SERVER["HTTP_REFERER"] . "#conference_request");
        else
            $this->error("添加失败:(conference_add)");
    }
    /**
     * 会议修改
     * @param $conference_id
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     * 需求principal权限
     */
    public function conference_modify($conference_id){
        $this->setAuthority(2);
        $conference = Db::name("conference")->where('id',$conference_id)->find();
        if(!$conference)$this->error("更名失败1:conference_modify");
        else {
            $conference['name'] = $this->request->param('name');
            trace($conference);
            $result = Db::name('conference')->where('id',$conference_id)->update($conference);
            if(!$result)$this->error("更名失败2:conference_modify");
            $this->redirect($_SERVER["HTTP_REFERER"]  . "#conference_request");
        }
    }
    /**
     * 会议删除
     */
    public function conference_del($conference_id){
        $this->setAuthority(2);
        $result = $this->_conference_del($conference_id);
        if(empty($result))
            $this->redirect($_SERVER["HTTP_REFERER"]  . "#conference_request");
        else
            $this->error($result);
    }
    /** conference_del
     * @param $conference_id
     * 需求principal权限
     */
    protected function _conference_del($conference_id){
        $result='';

        # 删除会议的要求
        $requests = Db::name('request')->where("conference_id",$conference_id)->select();
        foreach($requests as $key => $request){
            $result0 = $this->_request_del($request['id']);
            if(!empty($result0))$result = $result . $result0 . "<br>";
        }

        # 如果有推送，删除
        Db::name("pjtpushconf")
            ->where("conference_id",$conference_id)
            ->delete();

        # 删除会议本身
        $result1 = Db::name("conference")->where("id",$conference_id)->delete();
        if(!$result1)
            $result = $result . "_conference_del($conference_id): 会议记录删除失败" . "<br>";


        trace("Delete conference : " . (string)$conference_id);
        return $result;
    }

    /**
     * 会议的复制
     * @param $conference_id
     * @param null $newName
     * @return string
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    protected function _conference_copy($conference_id,$newName=null){
        // 获取原来的会议
        $conf = Db::name("conference")->where("id",$conference_id)->find();
        unset($conf['id']);
        if(!empty($newName)){
            $conf['name'] = $newName;
        }
        // 插入新会议，并且获取ID
        Db::name('conference')->insert($conf);
        $ret = Db::name('conference')->getLastInsID();
        // 获取这个会议相关的请求
        $request = Db::name("request")->where("conference_id",$conference_id)->select();
        // 复制请求，并且修改相应的conference_id
        foreach ($request as $req){
            $new = $this->_request_copy($req['id']);
            Db::name("request")->where("id",$new)->update(['conference_id'=>$ret]);
        }
        return $ret;
    }



    //-----------------------------------------------------------------------------------------------
    // 会议要求相关
    //-----------------------------------------------------------------------------------------------
    /**
     * request_add
     * 添加要求,需求principal权限
     * @param $conference_id
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    public function request_add($conference_id){
        $this->setAuthority(2);
        if($conference_id == null)$this->error("尚未添加会议,请先添加会议");
        $data = [
            'conference_id'=>$conference_id
        ];
        if(Db::name('request')->insert($data)){
            $data = Db::name('conference')
                ->where('id',$conference_id)
                ->field('files_count')
                ->find();
            $data['files_count']++;
            Db::name('conference')->where('id',$conference_id)->update($data);
            return $this->redirect($_SERVER["HTTP_REFERER"] . "#conference_request");
        }
        else
            return $this->error('添加失败:(admin/research/request_add)');
    }
    /**
     * @param $request_id       添加文件的要求的编号
     * @param bool $isTemplate  添加的文件是否是模板文件
     */
    public function request_add_file($request_id,$isTemplate=0){
//        $this->setAuthority(1);   // 需求太坑，这里权限很复杂，关了算了
                                    // 反正他们也不看
        $result = $this->file_add();
        if(empty($result)){
            $result = '';
            $id = Db::name('files')->getLastInsID('id');
            $request = Db::name("request")->where('id',$request_id)->find();
            //更新request的记录
            if($isTemplate == 0){// 添加了新的文件，留存文件记录
                if(empty($request['history']))
                    $request['history'] = $id;
                else
                    $request['history'] = $request['history'] . ",$id";
                $request['file_id'] = $id;
            }
            else $request['template_id'] = $id;// 这种情况是添加了模板
            $result2 = Db::name('request')->where('id',$request_id)->update($request);

            if(!$result2){
                $result = $result . "request $request_id update lose" . "<br>";
            }
            if(empty($result))
                $this->redirect($_SERVER["HTTP_REFERER"]  . "#conference_request");
            else
                $this->error($result);
        } else {
            $this->error($result);
        }
    }
    /**
     * 要求管理
     * 如果有post就是修改
     * 如果没有就是删除
     */
    public function request_dominate($request_id){
        $this->setAuthority(2);
        $post = $this->request->post();
        if($post){
            //如果有post,就是管理
            $data = [
                "abstract"=>$post['request_abstract'],
                "upload"=>$post['request_radio'],
            ];
            $result = Db::name('request')->where("id",$request_id)->update($data);
            if($result)
                $this->redirect($_SERVER["HTTP_REFERER"] . "#conference_request");
            else
                $this->error("request_dominate : 数据库更新失败,可能是因为你没有修改");
        } else {
            $result = $this->_request_del($request_id);
            if(empty($result))
                return $this->success("删除成功");
            else
                return $this->error($result);
        }
    }

    protected function _request_del($request_id){
        // 如果没有post,就是删除
        $result = '';
        // 先搜寻request所属的conference,修改conference的文件数目
        $result0 = Db::name('request')
            ->alias('req')
            ->join('__CONFERENCE__ con','req.conference_id = con.id')
            ->where('req.id',$request_id)
            ->field('con.id,con.files_count')
            ->find();
        if(!empty($result0)){
            $result0['files_count']--;
            if($result0['files_count'] < 0){
                $result = $result . "会议文件数目小于0,可能是出现历史遗留错误<br>";
            }
            Db::name('conference')
                ->where('id',$result0['id'])
                ->update($result0);
        } else {
            $result=$result . "request_dominate:找不到conference_id<br>";
        }

        // 遍历所有和request相关的文件(模板文件也是)进行删除
        $files = Db::name('files')
            ->where('type',"request:$request_id")
            ->field('id')
            ->select();
        if(!empty($files)){
            foreach ($files as $key=>$file){
                $result1 = $this->file_del($file['id']);
                if(!empty($result1))
                    $result = $result . $result1 . "<br>";
            }
        }

        // 删除request表中request的数据
        $result2 = Db::name("request")->where("id",$request_id)->delete();
        if(!$result2)
            $result = $result .  "request_dominate : 数据库记录删除失败,可能是没有寻找到文件" . "<br>";
        trace("Delete request : " . (string)$request_id);
        return $result;
    }

    /**
     * 复制request[$request_id]，创建新的request，并且返回相应的编号
     * @param $request_id
     * @return string 新request的编号
     */
    protected function _request_copy($request_id){
        $req = Db::name('request')->where('id',$request_id)->find();
        unset($req['id']);
        unset($req['history']);
        if(isset($req['file_id'])){
            $req['file_id'] = $this->file_copy($req['file_id']);
            $req['history'] = $req['file_id'];
        }
        if(isset($req['template_id'])){
            $req['template_id'] = $this->file_copy($req['template_id']);
        }

        Db::name('request')->insert($req);
        $ret = Db::name('request')->getLastInsID();
        if(isset($req['file_id'])){
            Db::name('files')
                ->where("id",$req['file_id'])
                ->update(['type'=>"request:$ret"]);
        }
         if(isset($req['template_id'])){
             Db::name('files')
                 ->where("id",$req['template_id'])
                 ->update(['type'=>"request:$ret"]);
         }

        return $ret;
    }
}


